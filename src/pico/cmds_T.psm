;;; ============================================================================
;;; Register map
;;; ============================================================================
;;; | name           | s0 | s1 | s2 | s3 | s4 | s5 | s6 | s7 | s8 | s9 | sA | sB |
;;; | CMD_TDC_TC     | x  |    |    |    |    |    |    |    |    |    |    |    |
	
CMD_TDC_TC:
	FETCH	s0, CLI_WORD_1
	COMPARE s0, 04
	CALL	Z,  trig_pulse
	FETCH	s0, CLI_WORD_1
	OR	s0, 10		; to mask the strobe bit on
	OUTPUT	s0, TDC_ENC_PORT
	LOAD	s0, s0
	LOAD	s0, s0
	LOAD 	s0, 00
	OUTPUT	s0, TDC_ENC_PORT
	RETURN

trig_pulse:
	;; first trigger the pulse
	LOAD	s0, 01	
	OUTPUT	s0, PULSE_CTL_PORT
	LOAD	s0, 00
	OUTPUT	s0, PULSE_CTL_PORT
	LOAD	sA, 04
	LOAD	sB, 20
	;; then wait for trigger latency
trig_delay:
	SUB	sB, 02
	SUBCY	sA, 00
	JUMP	NZ, trig_delay
	LOAD	s0, 00
	STORE	s0, CLI_WORD_1
	RETURN

CMD_TDC_TZ:
	OUTPUT	s0, FIFO_RESET
	RETURN

CMD_TDC_TF:
	INPUT	s0, FIFO_FLAGS	
	CALL	util_print_hex_byte
	CALL	util_print_EOL
	RETURN

CMD_TDC_TR:
	INPUT 	s5, FIFO_FLAGS
	AND	s5, 01
	RETURN	NZ
	INPUT	s0, FIFO_IN
	CALL	util_print_hex_byte
	INPUT	s0, FIFO_IN
	CALL	util_print_hex_byte
	INPUT	s0, FIFO_IN	
	CALL	util_print_hex_byte
	INPUT	s0, FIFO_IN
	CALL	util_print_hex_byte
	CALL	util_print_EOL
	JUMP	CMD_TDC_TR


;;; CMD_TDC_TS
;;; run a sweep n times and count the number of hits,
;;; where the arguement is n
;;; the second argument is the tc command number (0 or 4)
;;; sD : sE : sF is the accumulator
;;; s4 os the counter of hits msb
;;; s5 is the counter of hits lsb
;;; s6 is the 4 LSBits of the event ID (for checking purposes) from the header
	
CMD_TDC_TS:
	;; we start with the while loop for the trigger
	;; this is the trigger
	CALL	CMD_TDC_TZ
	LOAD	s0, CLI_WORD_1
	FETCH	s5, (s0)
	ADD	s0, 01
	FETCH	s4, (s0)
	;; is there a second argument?
	FETCH	s0, CLI_COUNT
	COMPARE	s0, 02
	;; 2 arguments
	;; store the tc command number in regbank b so we can just call
	;; the function
	JUMP	Z, TC_ARG_LOAD
	;; else one argument (default to 0)
	REGBANK	B
	LOAD	s0, 00
	STORE	s0, CLI_WORD_1
	JUMP	TC_LOAD_DONE	; can NOT belive i forgot this..
	;; initialize the registers
TC_ARG_LOAD:
	REGBANK B
	FETCH	s0, CLI_WORD_2
	STORE	s0, CLI_WORD_1

TC_LOAD_DONE:	
	REGBANK A
	LOAD	sD, 00
	LOAD	sE, 00
	LOAD	sF, 00
	LOAD	s6, 00
TC_LOOP:
	;; call tc command with the loaded CLI_WORD_1 from earlier
	REGBANK B
	;; now wait for window to happen (not needed)
	FETCH 	s0, CLI_WORD_2
	STORE 	s0, CLI_WORD_1
	;; FETCH	s0, CLI_WORD_1

	;; CALL	util_print_hex_byte
	CALL	CMD_TDC_TC

	FETCH 	s0, CLI_WORD_2
	COMPARE s0, 04
	CALL	Z, 50us_delay  ;; -- not needed!1
	REGBANK A
	;; start to read fifo
ts_fifo_loop:
	;; wait for data on fifo
	INPUT 	s0, FIFO_FLAGS
	AND	s0, 01
	JUMP	NZ, ts_fifo_loop
	INPUT	s0, FIFO_IN
	AND	s0, F0
	COMPARE	s0, C0
	JUMP	Z, TRAILER_WORD	; check if trailer
	COMPARE	s0, 60
	JUMP	Z, ERROR_WORD	; check if there was an error and exit if there was
	COMPARE	s0, A0
	JUMP	Z, HEADER_WORD	; check if we got the header and don't exit
	
	INPUT	s0, FIFO_IN
	LOAD 	s0, 00
	INPUT	s0, FIFO_IN
	LOAD 	s0, 00
	INPUT	s0, FIFO_IN
	JUMP	ts_fifo_loop

ERROR_WORD:
	;; throw away next one
	INPUT	s0, FIFO_IN
	LOAD	s0, s0
	;; save next two
	INPUT	s8, FIFO_IN
	AND	s8, 3F
	INPUT	s7, FIFO_IN
	;; remove the word from the word count
	SUB	sF, 01
	SUBCY	sE, 00
	SUBCY	sD, 00
	;; check if error present
	TEST	s7, FF
	JUMP	NZ, error_found
	TEST	s8, FF
	JUMP	NZ, error_found
	JUMP	ts_fifo_loop
error_found:	
	;; print the error code
	CALL	uart_output_wait
	LOAD	s0, "E"
	OUTPUT	s0, UART_OUTPUT
	LOAD	s0, s8
	CALL	util_print_hex_byte
	LOAD	s0, s7
	CALL	util_print_hex_byte
	CALL	util_print_EOL
	RETURN			; exit the function

HEADER_WORD:
	;; throw away the next one
	INPUT	s0, FIFO_IN
	LOAD	s0, s0
	LOAD 	s0, s0
	;; save event id LSBits
	INPUT	s6, FIFO_IN
	AND	s6, F0
	LOAD 	s0, s0
	;; throw away the next one
	INPUT	s0, FIFO_IN
	JUMP	ts_fifo_loop

TRAILER_WORD:
	;; throw away the next one
	INPUT	s0, FIFO_IN
	;; delay between fifo reads
	LOAD 	s0, s0
	LOAD 	s0, s0
	;; now we want the hit count s1:s0 -> 0000 XXXX : XXXX XXXX
	INPUT	s1, FIFO_IN	; msb
	;; now save and mask event ID
	LOAD	s7, s1
	AND	s7, F0
	;; compare IDs
	COMPARE	s7, s6
	JUMP	NZ, event_id_error ; will exit function
	;; mask out even ID
	AND	s1, 0F
	INPUT	s0, FIFO_IN	; lsb
	;; remove header and trailer from word count
	SUB	s0, 02
	SUBCY	s1, 00
	;; now add up the results
	ADD	sF, s0
	ADDCY	sE, s1
	ADDCY	sD, 00
	;; now continue with the loop
	SUB	s5, 01
	SUBCY	s4, 00
	JUMP	NZ, TC_LOOP

	;; print the number of hits
	CALL	uart_output_wait
	LOAD	s0, "N"
	OUTPUT	s0, UART_OUTPUT
	LOAD	s0, sD
	CALL	util_print_hex_byte
	LOAD	s0, sE
	CALL	util_print_hex_byte
	LOAD	s0, sF
	CALL	util_print_hex_byte
	CALL	util_print_EOL
	RETURN			; exit the function
	
event_id_error:
	CALL	uart_output_wait
	LOAD	s0, "I"
	OUTPUT	s0, UART_OUTPUT
	LOAD	s0, s6		; header id
	CALL	util_print_hex_byte
	LOAD	s0, s7		; trailer id
	CALL	util_print_hex_byte
	CALL	util_print_EOL
	RETURN			; exit the function

;; never used...
50us_delay:
	;; for 50us  0210
	;; for 200us 0840
	;; for 2.5ms 682A
	;; for 1.0ms 29AA
	LOAD	sA, 29
	LOAD	sB, AA
50us_loop:
	SUB	sB, 01
	SUBCY	sA, 00
	JUMP	NZ, 50us_loop
	;; LOAD	s0, 00
	;; OUTPUT	s0, 0C
	RETURN
	

CMD_TEST_FAULT:
	INPUT	s0, TEST_FAULT_PORT
	OR	s0, 11
	CALL	util_print_hex_byte
	CALL	util_print_EOL
	RETURN
